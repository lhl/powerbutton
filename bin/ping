#!/usr/bin/python


from   concurrent.futures import ProcessPoolExecutor, wait
import datetime
import socket
import sys
import time


is_up = True
last_start = 0.0
last_down = 0.0
last_up = 0.0

# In general, we'll have short timeouts, but DNS resolution takes 5s
'''
We've encountered this before: https://randomfoo.net/2013/05/07/dirty-hack-of-the-day-python-dns-edition

you can use fping http://serverfault.com/questions/200468/how-can-i-set-a-short-timeout-with-the-ping-command
but that doesn't help w/ DNS

Now we can use concurrent.futures to easily do a thread for DNS
'''
socket.setdefaulttimeout(0.5)


def dns_lookup(host):
  socket.gethostbyname(host)
  return 'dns done'


if socket.gethostname() == 'powerbutton':
  target = '192.168.7.109'
  target = 'oregon.local'
else:
  target = 'devbox.local'

pool = ProcessPoolExecutor(1)
while 1:
  last_start = time.time()

  try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # DNS lookup
    future = pool.submit(dns_lookup, (target))
    print(time.time())
    # result = wait([future], 0.5)
    # print(len(result.not_done))
    try:
      print(future.result(0.5))
    except:
      print('not done')
      future.cancel()
      # continue
    print(time.time())
    sys.exit()


    s.connect((target, 22))
    last_up = time.time()
    print(str(datetime.datetime.fromtimestamp(last_up)) + ': OK')
    if not is_up:
      downtime = last_up - last_down
      print('Back up after {.2f} s down').format(downtime)
      is_up = True
    s.close()
  except socket.error as e:
    last_down = time.time()
    print(str(datetime.datetime.fromtimestamp(last_down)) + ': .')
    if is_up:
      is_up = False

  sleep = (last_start+1) - time.time() - 0.002
  if sleep > 0:
    time.sleep(sleep)
  else:
    print(sleep)
