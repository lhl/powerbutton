#!/usr/bin/python


import datetime
from   multiprocessing import Process, Queue
import socket
import sys
import time


is_up = True
last_start = 0.0
last_down = 0.0
last_up = 0.0

# In general, we'll have short timeouts, but DNS resolution takes 5s
'''
We've encountered this before: https://randomfoo.net/2013/05/07/dirty-hack-of-the-day-python-dns-edition

you can use fping http://serverfault.com/questions/200468/how-can-i-set-a-short-timeout-with-the-ping-command
but that doesn't help w/ DNS

Now we can use concurrent.futures to easily do a thread for DNS
'''
socket.setdefaulttimeout(0.5)


def dns_lookup(host, q):
  try:
    socket.gethostbyname(host)
    q.put('OK')
  except:
    pass


if socket.gethostname() == 'powerbutton':
  target = 'oregon.local'
else:
  target = 'devbox.local'

while 1:
  last_start = time.time()

  try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # DNS lookup
    q = Queue()
    p = Process(target=dns_lookup, args=(target, q,))
    p.start()
    time.sleep(0.4)

    if q.empty():
      p.terminate()
      print(str(datetime.datetime.fromtimestamp(time.time())) + ': ! nodns')


    # Only if we can DNS connect
    else:
      s.connect((target, 22))
      last_up = time.time()
      print(str(datetime.datetime.fromtimestamp(last_up)) + ': OK')
      if not is_up:
        downtime = last_up - last_down
        print('Back up after {:.2f} s down').format(downtime)
        is_up = True
      s.close()

  except socket.error as e:
    last_down = time.time()
    print(str(datetime.datetime.fromtimestamp(last_down)) + ': .')
    if is_up:
      is_up = False

  sleep = (last_start+1) - time.time() - 0.001
  if sleep > 0:
    time.sleep(sleep)
  else:
    print(sleep)
